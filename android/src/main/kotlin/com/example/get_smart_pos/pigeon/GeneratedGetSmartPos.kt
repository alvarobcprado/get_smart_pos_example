// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.get_smart_pos

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPaymentRequest (
  val paymentType: String,
  val amount: String,
  val callerId: String,
  val creditType: String? = null,
  val currencyPosition: String? = null,
  val currencyCode: String? = null,
  val installments: String? = null,
  val extraScreens: String? = null,
  val extraData: String? = null,
  val disableTypedTransaction: Boolean? = null,
  val disableMagStripe: Boolean? = null,
  val disableCustomerSlipSpace: Boolean? = null,
  val allowPrintCurrentTransaction: Boolean? = null,
  val orderId: String? = null,
  val additionalInfo: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonPaymentRequest {
      val paymentType = list[0] as String
      val amount = list[1] as String
      val callerId = list[2] as String
      val creditType = list[3] as String?
      val currencyPosition = list[4] as String?
      val currencyCode = list[5] as String?
      val installments = list[6] as String?
      val extraScreens = list[7] as String?
      val extraData = list[8] as String?
      val disableTypedTransaction = list[9] as Boolean?
      val disableMagStripe = list[10] as Boolean?
      val disableCustomerSlipSpace = list[11] as Boolean?
      val allowPrintCurrentTransaction = list[12] as Boolean?
      val orderId = list[13] as String?
      val additionalInfo = list[14] as String?
      return PigeonPaymentRequest(paymentType, amount, callerId, creditType, currencyPosition, currencyCode, installments, extraScreens, extraData, disableTypedTransaction, disableMagStripe, disableCustomerSlipSpace, allowPrintCurrentTransaction, orderId, additionalInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      paymentType,
      amount,
      callerId,
      creditType,
      currencyPosition,
      currencyCode,
      installments,
      extraScreens,
      extraData,
      disableTypedTransaction,
      disableMagStripe,
      disableCustomerSlipSpace,
      allowPrintCurrentTransaction,
      orderId,
      additionalInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPaymentResponse (
  val result: String,
  val amount: String,
  val callerId: String,
  val type: String,
  val inputType: String,
  val installments: String,
  val resultDetails: String? = null,
  val nsu: String? = null,
  val nsuLastSuccessfullMessage: String? = null,
  val cvNumber: String? = null,
  val brand: String? = null,
  val gmtDateTime: String? = null,
  val nsuLocal: String? = null,
  val authorizationCode: String? = null,
  val cardBin: String? = null,
  val cardLastDigits: String? = null,
  val extraScreensResult: String? = null,
  val cardholderName: String? = null,
  val automationSlip: String? = null,
  val printMerchantPreference: Boolean? = null,
  val orderId: String? = null,
  val pixPayloadResponse: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonPaymentResponse {
      val result = list[0] as String
      val amount = list[1] as String
      val callerId = list[2] as String
      val type = list[3] as String
      val inputType = list[4] as String
      val installments = list[5] as String
      val resultDetails = list[6] as String?
      val nsu = list[7] as String?
      val nsuLastSuccessfullMessage = list[8] as String?
      val cvNumber = list[9] as String?
      val brand = list[10] as String?
      val gmtDateTime = list[11] as String?
      val nsuLocal = list[12] as String?
      val authorizationCode = list[13] as String?
      val cardBin = list[14] as String?
      val cardLastDigits = list[15] as String?
      val extraScreensResult = list[16] as String?
      val cardholderName = list[17] as String?
      val automationSlip = list[18] as String?
      val printMerchantPreference = list[19] as Boolean?
      val orderId = list[20] as String?
      val pixPayloadResponse = list[21] as String?
      return PigeonPaymentResponse(result, amount, callerId, type, inputType, installments, resultDetails, nsu, nsuLastSuccessfullMessage, cvNumber, brand, gmtDateTime, nsuLocal, authorizationCode, cardBin, cardLastDigits, extraScreensResult, cardholderName, automationSlip, printMerchantPreference, orderId, pixPayloadResponse)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      result,
      amount,
      callerId,
      type,
      inputType,
      installments,
      resultDetails,
      nsu,
      nsuLastSuccessfullMessage,
      cvNumber,
      brand,
      gmtDateTime,
      nsuLocal,
      authorizationCode,
      cardBin,
      cardLastDigits,
      extraScreensResult,
      cardholderName,
      automationSlip,
      printMerchantPreference,
      orderId,
      pixPayloadResponse,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCheckStatusRequest (
  val callerId: String,
  val allowPrintCurrentTransaction: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonCheckStatusRequest {
      val callerId = list[0] as String
      val allowPrintCurrentTransaction = list[1] as Boolean?
      return PigeonCheckStatusRequest(callerId, allowPrintCurrentTransaction)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      callerId,
      allowPrintCurrentTransaction,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCheckStatusResponse (
  val result: String,
  val resultDetails: String? = null,
  val amount: String? = null,
  val callerId: String? = null,
  val nsu: String? = null,
  val nsuLastSuccessfullMessage: String? = null,
  val cvNumber: String? = null,
  val type: String? = null,
  val brand: String? = null,
  val inputType: String? = null,
  val installments: String? = null,
  val gmtDateTime: String? = null,
  val nsuLocal: String? = null,
  val authorizationCode: String? = null,
  val cardBin: String? = null,
  val cardLastDigits: String? = null,
  val extraScreensResult: String? = null,
  val cardholderName: String? = null,
  val automationSlip: String? = null,
  val printMerchantPreference: Boolean? = null,
  val orderId: String? = null,
  val pixPayloadResponse: String? = null,
  val refunded: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonCheckStatusResponse {
      val result = list[0] as String
      val resultDetails = list[1] as String?
      val amount = list[2] as String?
      val callerId = list[3] as String?
      val nsu = list[4] as String?
      val nsuLastSuccessfullMessage = list[5] as String?
      val cvNumber = list[6] as String?
      val type = list[7] as String?
      val brand = list[8] as String?
      val inputType = list[9] as String?
      val installments = list[10] as String?
      val gmtDateTime = list[11] as String?
      val nsuLocal = list[12] as String?
      val authorizationCode = list[13] as String?
      val cardBin = list[14] as String?
      val cardLastDigits = list[15] as String?
      val extraScreensResult = list[16] as String?
      val cardholderName = list[17] as String?
      val automationSlip = list[18] as String?
      val printMerchantPreference = list[19] as Boolean?
      val orderId = list[20] as String?
      val pixPayloadResponse = list[21] as String?
      val refunded = list[22] as Boolean?
      return PigeonCheckStatusResponse(result, resultDetails, amount, callerId, nsu, nsuLastSuccessfullMessage, cvNumber, type, brand, inputType, installments, gmtDateTime, nsuLocal, authorizationCode, cardBin, cardLastDigits, extraScreensResult, cardholderName, automationSlip, printMerchantPreference, orderId, pixPayloadResponse, refunded)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      result,
      resultDetails,
      amount,
      callerId,
      nsu,
      nsuLastSuccessfullMessage,
      cvNumber,
      type,
      brand,
      inputType,
      installments,
      gmtDateTime,
      nsuLocal,
      authorizationCode,
      cardBin,
      cardLastDigits,
      extraScreensResult,
      cardholderName,
      automationSlip,
      printMerchantPreference,
      orderId,
      pixPayloadResponse,
      refunded,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object GetSmartPosHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCheckStatusRequest.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCheckStatusResponse.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPaymentRequest.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPaymentResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonCheckStatusRequest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonCheckStatusResponse -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonPaymentRequest -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonPaymentResponse -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface GetSmartPosHostApi {
  fun paymentV3(request: PigeonPaymentRequest, callback: (Result<PigeonPaymentResponse>) -> Unit)
  fun checkStatus(request: PigeonCheckStatusRequest, callback: (Result<PigeonCheckStatusResponse>) -> Unit)

  companion object {
    /** The codec used by GetSmartPosHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GetSmartPosHostApiCodec
    }
    /** Sets up an instance of `GetSmartPosHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: GetSmartPosHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.get_smart_pos.GetSmartPosHostApi.paymentV3", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as PigeonPaymentRequest
            api.paymentV3(requestArg) { result: Result<PigeonPaymentResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.get_smart_pos.GetSmartPosHostApi.checkStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as PigeonCheckStatusRequest
            api.checkStatus(requestArg) { result: Result<PigeonCheckStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
